
package com.cardinalhealth.wbd.order.controller;

import org.owasp.esapi.logging.slf4j.Slf4JLogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cardinalhealth.framework.constant.CommonConstants;
import com.cardinalhealth.framework.exception.BusinessFault;
import com.cardinalhealth.framework.exception.SystemFault;
import com.cardinalhealth.framework.utils.ESAPILogger;
import com.cardinalhealth.wbd.order.compliance.mapper.request.SubmitCompliancePackageOrderRequest;
import com.cardinalhealth.wbd.order.compliance.mapper.request.SubmitCompliancePackageOrderResponse;
import com.cardinalhealth.wbd.order.compliance.service.CompliancePackageOrderService;
import com.cardinalhealth.wbd.order.constant.CompliancePackageOrderConstant;
import com.cardinalhealth.wbd.order.constant.OrderConstants;
import com.cardinalhealth.wbd.sap.order.mapper.response.CompliancePackageOrderStatusRequest;
import com.cardinalhealth.wbd.sap.order.mapper.response.CompliancePackageOrderStatusResponse;
import com.cardinalhealth.wbd.sap.order.mapper.response.OrderValidationResponseVO;
import com.cardinalhealth.wbd.sap.order.mapper.response.OrderValidationtWrapper;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
@RestController
@RequestMapping(CommonConstants.API_BASE_PATH + CompliancePackageOrderConstant.Api.Path.COMPLIANCE_ORDER_SERVICE_BASE)
public class CompliancePackageOrderController {
	
	@Autowired
	CompliancePackageOrderService compliancePackageOrderService;
	
	  
	
	final ESAPILogger logger = new ESAPILogger(new Slf4JLogFactory().getLogger(CompliancePackageOrderController.class));
   
   
   @PostMapping(path= CompliancePackageOrderConstant.Api.Path.COMPLIANCE_ORDER_SERVICE_SAVE, produces=MediaType.APPLICATION_JSON_VALUE)
   public SubmitCompliancePackageOrderResponse receiveCompliancePackageOrder(@RequestBody SubmitCompliancePackageOrderRequest submitCompliancePackageOrderRequest) throws Exception{
	   SubmitCompliancePackageOrderResponse response = new SubmitCompliancePackageOrderResponse();
	   response.setSourceIdentifier(submitCompliancePackageOrderRequest.getFocus()!=null?submitCompliancePackageOrderRequest.getFocus().getIdentifier():"No identifier found");
	   try {
		   logger.info("CompliancePackageOrderController - receiveCompliancePackageOrder :: Start "+submitCompliancePackageOrderRequest);
		   OrderValidationtWrapper orderValidationtWrapper = compliancePackageOrderService.saveCompliancePackageOrderService(submitCompliancePackageOrderRequest);
		   response.setStatus(orderValidationtWrapper != null?orderValidationtWrapper.getValidateOrder():new OrderValidationResponseVO("No response from validator",1234));
	   }catch(Exception e) {
		   logger.error("CompliancePackageOrderController - receiveCompliancePackageOrder :: Exception Occurred while saving "+e.getMessage());
		   response.setStatus(new OrderValidationResponseVO("Exception Occurred while saving :"+e.getMessage(),1234));
	   }
	   
	   return response;
   }
  
   /**
	 * api end point to search compliance package order status.
	 * 
	 * @param compliancePackageOrderStatusRequest
	 * @return
	 * @throws BusinessFault
	 */

	@Operation(summary = CompliancePackageOrderConstant.Api.Description.COMPLIANCE_ORDER_SERVICE_STATUS_DESC, responses = {
			@ApiResponse(responseCode = CommonConstants.ApiResponseCodes.HTTP_OK, description = CompliancePackageOrderConstant.Api.ResponseMessages.COMPLIANCE_ORDER_SERVICE_STATUS_MSG),
			@ApiResponse(responseCode = CommonConstants.ApiResponseCodes.HTTP_INTERNAL_SERVER_ERROR, description = OrderConstants.ApiResponseMessages.SYSTEM_ERROR, content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = SystemFault.class))) })
	@CrossOrigin
	@PostMapping(path = CompliancePackageOrderConstant.Api.Path.COMPLIANCE_ORDER_SERVICE_STATUS, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<CompliancePackageOrderStatusResponse> compliancePackageOrderStatus(
			@RequestBody CompliancePackageOrderStatusRequest compliancePackageOrderStatusRequest) throws BusinessFault {
		return new ResponseEntity<>(
				compliancePackageOrderService.compliancePackageOrderStatus(compliancePackageOrderStatusRequest),
				HttpStatus.OK);
	}
 
}
